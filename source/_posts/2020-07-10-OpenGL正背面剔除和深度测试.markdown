---
title:      "OpenGL正背面剔除和深度测试" 
date:       2020-07-10
tags:
    - OpenGL 
categories:
    - OpenGL 
---

在绘制3D图形时，应该判断哪些面对于观察者可见，哪些面对于观察者不可见。不可见部分应该及时丢弃，以提高渲染效率。
专业术语叫做“消除隐藏面”……

**正面**：按逆时针顶点连接顺序绘制的三角形。
**背面**：按顺时针顶点连接顺序绘制的三角形。

> Note：由于观察者角度不同，正面和背面可能不同。

#### 1、油画算法

![油画算法](https://upload-images.jianshu.io/upload_images/1395687-6787b795eed70506.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)


先绘制离观察者比较远的三角形，再在它们上方绘制距离比较近的三角形。

油画算法只能解决排序好的三角形渲染，且重叠部分渲染性能较差，而且也不能区分未排序的叠加三角形。

####正背面剔除

对正面和背面三角形进行区分的原因之一就是为了剔除。

背面剔除能够极大的提高性能。剔除即在图元装配阶段就整体抛弃了一些三角形，并且没有执行任何不恰当的光栅化操作。

正面剔除也很有用，如在需要显示某些图形内部渲染的时候。渲染透明对象时，会对对象进行两次渲染，第一次开启透明并剔除正面，第二次剔除背面。

**设置剔除正面还是剔除背面函数**

```
void glCullFace(GLenum mode);
```
mode参数可用值：`GL_FRONT`/`GL_BACK`/`GL_FRONT_AND_BACK`


**开启和关闭剔除**

```
glEnable(GL_CULL_FACE);
glDisable(GL_CULL_FACE);
```

所以消除不透明物体内部几何图形只需要如下代码：
```
glCullFace(GL_BACK);
glEnable(GL_CULL_FACE);
```

#### 深度测试

**深度缓冲区**：指的是一块存储像素深度(z值)的内存区域。深度值范围[0, 1]之间，根据观察者的位置，如果观察者在z轴正值方向，则深度值越大，离观察者越近；相反如果观察者在z轴负值方向，则深度值越大，离观察者越远。

**深度测试**：OpenGL执行深度测试时，如果深度测试通过，则使用新的像素深度值覆盖深度缓冲区中的值，如果测试未通过，则丢弃该像素。

开启/关闭深度测试：
```
glEnable(GL_DEPTH_TEST);
glDisable(GL_DEPTH_TEST);
```

清除颜色缓冲区和深度缓冲区，深度缓冲区默认值为1
```
glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
````

深度缓冲区写入开关
```
//value: GL_TURE,开启深度缓冲区写入; GL_FALSE,关闭深度缓冲区写⼊
void glDepthMask(GLBool value);
```

深度测试函数：定义深度测试通过的规则
```
glDepthFunc(GL_LESS);
```

|  运算符   | 描述  |
|  ----  | ----  |
| GL_ALWAYS  | 永远通过测试 |
| GL_NEVER | 永远不通过测试 |
| GL_LESS  | 在片段深度值小于缓冲区的深度时通过测试  |
| GL_EQUAL  | 在片段深度值等于缓冲区的深度时通过测试  |
| GL_LEQUAL  | 在片段深度值小于等于缓冲区的深度时通过测试  |
| GL_GREATER  | 在片段深度值大于缓冲区的深度时通过测试  |
| GL_NOTEQUAL  | 在片段深度值不等于缓冲区的深度时通过测试  |
| GL_GEQUAL  | 在片段深度值大于等于缓冲区的深度时通过测试  | 

默认是`GL_LESS`,即丢弃深度值大于或等于当前缓冲区深度的像素。

###### 深度测试引起的`Z-Fighting`(`Z冲突/闪烁`)问题

**原因**：深度缓冲区精度有限制，深度差别非常小的情况下，OpenGL分不清前后造成的。

**解决办法**：

**多边形偏移 Polygon Offset**:在两个图层之间添加一个偏移，但是手动添加比较复杂且不精准，所以需要用到多边形偏移。

开启多边形偏移
```
glEnable(GL_POLYGON_OFFSET_FILL)
```

指定偏移量
```
glPolygonOffset(GLFloat factor, GLFloat units);
```

factor和units一般是-1和-1.

**预防**：

    1. 不要将两个物体靠太近，避免渲染时三角形叠在一起。

    2. 尽可能将近裁剪面设置的离观察者远一点。

    3. 使用高位数的深度缓冲区，精度更高。